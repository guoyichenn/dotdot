1. DUpicated Code 重复代码

2. Long Method 过长函数
    如果能给一个小函数取一个好名字，其他使用这个函数的人就会很好利用它
    当需要 写点注释说明的时候 我们就需要把这个东西写进独立函数中
    条件表达式 和 循环 往往也是提炼的信号
3. Large Class 过大的类

4. Long Parameter List 过长参数列

5. Divergent Change 发散式变化
    一旦需要修改，我们希望能够跳到系统的某一点，只在该处做修改。如果做不到这点，你就嗅出两种精密相关的刺鼻味道的其中一种了
6. shotgun Surgery 散弹式修改
    和 5 很像 但是 但也恰恰相反 如果每遇到一个变化，需要在许多不同的类内做许多小修改，不但不容易找到，也很容易忘记
    Divergent Change 是指一个类多种变化影响，shotgun Surgery 则是指 一种变化引发的多个类相应修改
7. feature Envy 依恋情结
    函数的某个类的兴趣高于自己所处类的兴趣
8、Data Clumps 数据泥团
    数据项就像小孩子，喜欢成群结对呆在一块，你常常可以看到相同的三四项数据，这些绑在一起的数据真应该有属于他们的对象
9、Primitive Obsession 基本类型偏执
    难以处理的基本数据类型，可以通过一个一个小对象来解决
10、Switch Statement （switch 惊悚现身）
    面相对象最明显的特征就是 少用 switch 他的问题在与重复，添加一个新的case 就需要找到所有的switch，
    解决方式，大多时候可以使用多态
11、Parallel Inheritance Hierarchies 平行继承体系
    如果你发现腻味某个类增加一个子类，也需要在另一个类中天假一个子类
12、Lazy Class 冗赘类
    如果一个类不值其身价，就得让他消失
13、 Speculative Generality 夸夸奇谈未来性
    用不上的装置只会挡你的路，所以，把它搬开吧
14、 Temporary Field 令人迷惑的暂时手段
    在变量为被使用的情况下猜测其当初设计目的，会让你发疯的
15、Message Chains 过度耦和的消息链
    一个对象请求另一个对象然后在请求下一个对象，就被成为消息链，因为代码过于紧密耦合，一旦对象间的关系发生变化，就不得不作出修改



